public class App {
    public static void main(String[] args) throws Exception {
        //TODO: Implement an extensive testing main!!!
        //Note: the print function tests both next and previous links
        //comment part of the code you will not be testing

        //make a move to front list
        MoveToFrontList<Integer> mtf = new MoveToFrontList<Integer>();
        //fill it with 10 elements
        for(int i = 0; i < 10; i++)
        {
            mtf.insert(i);
        }
        RecursiveTraverse<Integer> traverse = new RecursiveTraverse<Integer>(mtf);
        for(int i = 0; i < 10; i++)
        {
           System.out.print(traverse.get(i));
        }
        //Test edge cases
        System.out.println(traverse.get(10));
        System.out.println(traverse.get(-1));
        System.out.println(traverse.get(5));
        System.out.println(traverse.get(5));
        mtf.access(-1);
        print(mtf);
        mtf.access(5);
        print(mtf);
        traverse.setList(mtf);
        //Test the reverse function
        System.out.println("Testing the reverse function");
        SelfOrderingList<Integer> reverse = traverse.reverseList();
        print(traverse.list);

       
            
        
         


    }
    public static void print(SelfOrderingList<Integer> list)
    {
        Node<Integer> node = list.head;
        while(node!= null)
        {
            System.out.print(node.toString());
            node = node.next;
        }
        System.out.println();

        
    }

}
//Expected output:
/*
 * Testing countlist fucntions.................................
Testing insert function with both next and prev links.......:
(0[0])(1[0])(2[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(2[0])(1[0])(0[0])
Testing the remove function in all cases......................:
(1[0])(2[0])(3[0])(4[0])(6[0])(7[0])(8[0])
(8[0])(7[0])(6[0])(4[0])(3[0])(2[0])(1[0])
Testing the access method of countlist...........................
Accesing 4: (4[1])(1[0])(2[0])(3[0])(6[0])(7[0])(8[0])
(8[0])(7[0])(6[0])(3[0])(2[0])(1[0])(4[1])
Accesing 8: (4[1])(8[1])(1[0])(2[0])(3[0])(6[0])(7[0])
(7[0])(6[0])(3[0])(2[0])(1[0])(8[1])(4[1])
Accesing 4: (4[2])(8[1])(1[0])(2[0])(3[0])(6[0])(7[0])
(7[0])(6[0])(3[0])(2[0])(1[0])(8[1])(4[2])
Accesing 1: (4[2])(8[1])(1[1])(2[0])(3[0])(6[0])(7[0])
(7[0])(6[0])(3[0])(2[0])(1[1])(8[1])(4[2])
Accesing 1: (4[2])(1[2])(8[1])(2[0])(3[0])(6[0])(7[0])
(7[0])(6[0])(3[0])(2[0])(8[1])(1[2])(4[2])
Accesing 5: (4[2])(1[2])(8[1])(2[0])(3[0])(6[0])(7[0])
(7[0])(6[0])(3[0])(2[0])(8[1])(1[2])(4[2])
Testing Move to front functions.................................
Testing access..................................................
Before: (1[0])(2[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])(10[0])
(10[0])(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(2[0])(1[0])
Acessing 5: 
(5[0])(1[0])(2[0])(3[0])(4[0])(6[0])(7[0])(8[0])(9[0])(10[0])
(10[0])(9[0])(8[0])(7[0])(6[0])(4[0])(3[0])(2[0])(1[0])(5[0])
Acessing 5: 
(5[0])(1[0])(2[0])(3[0])(4[0])(6[0])(7[0])(8[0])(9[0])(10[0])
(10[0])(9[0])(8[0])(7[0])(6[0])(4[0])(3[0])(2[0])(1[0])(5[0])
Acessing 10: 
(10[0])(5[0])(1[0])(2[0])(3[0])(4[0])(6[0])(7[0])(8[0])(9[0])
(9[0])(8[0])(7[0])(6[0])(4[0])(3[0])(2[0])(1[0])(5[0])(10[0])
Acessing 6: 
(6[0])(10[0])(5[0])(1[0])(2[0])(3[0])(4[0])(7[0])(8[0])(9[0])
(9[0])(8[0])(7[0])(4[0])(3[0])(2[0])(1[0])(5[0])(10[0])(6[0])
Acessing 10: 


Testing natural order functions..........................
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(2[0])(1[0])(0[0])
(0[0])(1[0])(2[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])
(9[0])(8[0])(7[0])(6[0])(5[0])
(5[0])(6[0])(7[0])(8[0])(9[0])
Testing transpose function......................................
Before trasposing stuff: (0[0])(1[0])(2[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(2[0])(1[0])(0[0])
Transposing 2:
(0[0])(2[0])(1[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(1[0])(2[0])(0[0])
Transposing 2:
(2[0])(0[0])(1[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(1[0])(0[0])(2[0])
Transposing 9:
(2[0])(0[0])(1[0])(3[0])(4[0])(5[0])(6[0])(7[0])(9[0])(8[0])
(8[0])(9[0])(7[0])(6[0])(5[0])(4[0])(3[0])(1[0])(0[0])(2[0])
Transposing 5:
(2[0])(0[0])(1[0])(3[0])(5[0])(4[0])(6[0])(7[0])(9[0])(8[0])
(8[0])(9[0])(7[0])(6[0])(4[0])(5[0])(3[0])(1[0])(0[0])(2[0])
Testing Iterative traverse functions...........................
Testing toString ...............................................
->(0[0])->(1[0])->(2[0])->(3[0])->(4[0])->(5[0])->(6[0])->(7[0])->(8[0])->(9[0])

Testing contains .............................................. 
list contains 0 ? yes
list contains 17 ? no

Testing size ...................................................
Size of list is: 10

Testing find .................................................... 
find 2 in iterative -> (2[0])

Testing get .............................................. 
Get node in position 3 ->(3[0])

Testing reverse list .............................................. 
List reversed:
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(2[0])(1[0])(0[0])
(0[0])(1[0])(2[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])

Testing clone .............................................. 
List cloned:
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(2[0])(1[0])(0[0])
(0[0])(1[0])(2[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])

Testing ToString .............................................. 
->(0[0])->(1[0])->(2[0])->(3[0])->(4[0])->(5[0])->(6[0])->(7[0])->(8[0])->(9[0])
Testing Recursive traverse functions...........................
Testing toString ...............................................
->(0[0])->(1[0])->(2[0])->(3[0])->(4[0])->(5[0])->(6[0])->(7[0])->(8[0])->(9[0])

Testing contains .............................................. 
list contains 0 ? yes
list contains 17 ? no

Testing size ...................................................
Size of list is: 10

Testing find .................................................... 
find 2 in recursive -> (2[0])

Testing get .............................................. 
Get node in position 3 ->(3[0])

Testing reverse list .............................................. 
List reversed:
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(2[0])(1[0])(0[0])
(0[0])(1[0])(2[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])

Testing clone .............................................. 
List cloned:
(9[0])(8[0])(7[0])(6[0])(5[0])(4[0])(3[0])(2[0])(1[0])(0[0])
(0[0])(1[0])(2[0])(3[0])(4[0])(5[0])(6[0])(7[0])(8[0])(9[0])

Testing ToString .............................................. 
->(0[0])->(1[0])->(2[0])->(3[0])->(4[0])->(5[0])->(6[0])->(7[0])->(8[0])->(9[0])
 */
